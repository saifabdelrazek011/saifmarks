// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  emails         Email[]
  hashedPassword String

  firstName String?
  lastName  String?

  isAdmin Boolean @default(false)

  bookmarks Bookmark[]
  shortUrls ShortUrl[]

  resetPasswordToken   String?   @unique
  resetPasswordExpires DateTime?

  @@map("users")
}

model Email {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email      String  @unique
  isPrimary  Boolean @default(false)
  isVerified Boolean @default(false)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  verificationToken   String?   @unique
  verificationExpires DateTime?

  @@unique([userId, isPrimary])
  @@map("emails")
}

model Bookmark {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String?
  url         String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  userBookmarkId Int @default(autoincrement())

  shortUrlId String?  @unique
  shortUrl   ShortUrl? 

  @@unique([userId, userBookmarkId])
  @@map("bookmarks")
}

model ShortUrl {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fullUrl      String   
  shortUrl     String   @unique
  clicks       Int      @default(0)

  createdById String
  createdBy   User    @relation(fields: [createdById], references: [id])

  bookmarkId  String?   @unique
  bookmark    Bookmark? @relation(fields: [bookmarkId], references: [id])

  @@unique([createdById, fullUrl])
  @@map("shorturls")
}